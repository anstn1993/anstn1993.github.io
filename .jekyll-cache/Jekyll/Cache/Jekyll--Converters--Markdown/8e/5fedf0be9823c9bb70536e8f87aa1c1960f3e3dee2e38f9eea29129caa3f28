I"8<p>sprint6, 7에 대한 회고록이다. 짧은 시간동안 개발을 마치고 sprint 6때는 리팩토링, 테스트 코드 작성을 통한 소나큐브 커버리지 높이기, 서비스의 cli 구축 등의 과제를 진행했고, sprint 7에서는 웹 서버의 스케일 아웃을 위한 여러 과제들을 진행했다. 정말 많은 것들을 배우고, 느낄 수 있었던 sprint여서 매우 만족한다.</p>

<h3 id="sprint6---개발만-했다고-끝이-아니다-꾸준한-개선의-연속">sprint6 - 개발만 했다고 끝이 아니다. 꾸준한 개선의 연속</h3>

<hr />

<p>sprint 6의 메인 과제는 우리가 개발 기간에 작성한 덩어리 같은 코드들을 깨끗한, 유지보수에 좀 더 용이한 코드로 개선하는 것이었다. 매 sprint마다 그랬지만 이때도 처음해보는 것들이 많았다.</p>

<h5 id="코드리뷰">코드리뷰</h5>

<p>코드리뷰를 처음 진행해봤다. 우리 TF는 이사님에게 리뷰를 받았는데 친절하고 유쾌하면서도 핵심은 놓치지 않고 콕콕 찌르는 지적을 받게 됐다. 많은 내용들을 배울 수 있었는데, 코딩 스타일과 책임의 적절한 분리에 대해서 다시 생각해보게 되는 계기가 됐다. 특히 책임의 적절한 분리에 대해서 얘기를 해보자면, 서비스 레이어가 가져가야 할 책임이 컨트롤러 레이어에게 전가되고 있는 문제가 있었다. 컨트롤러는 흐름제어라는 최소한의 역할만 수행하고 실제 비즈니스 로직은 서비스가 담당하게끔 해야 한다. 앞으로는 이 내용을 잊지 않고 주의하면서 코딩을 해야겠다.</p>

<h5 id="소나큐브를-통한-코드-개선">소나큐브를 통한 코드 개선</h5>

<p>정적 분석 툴인 소나큐브를 처음 접했다. 젠킨스로 우리 프로젝트를 빌드하면 그 결과가 소나큐브에 반영되는데 우리가 작성한 코드에 어떤 문제나 잠재적 위험이 존재하는지, 테스트 코드 커버리지는 얼마나 되는지 등의 정보를 제공해주는데, 이 툴을 이용해서 코드 개선 작업을 진행했다. 일차적으로 코드 스멜을 많이 없애는 작업을 진행했고, 이후에는 코드리뷰때 받은 지적사항들을 개선하는 작업을 진행했다. 그리고 junit5를 이용해서 테스트 코드를 작성했고, 커버리지를 높일 수 있었다.(테스트 코드 자체가 잘 작성됐는지는 미지수지만…)
코드 개선 방향에 무조건적인 정답은 있을 수 없겠지만, 소나큐브가 어느 정도 기준점이 되어줬다. 코드 스타일이 전반적으로 통일되고, 잠재적 위험을 많이 제거했으며, 커버리지를 높여서 서비스의 신뢰성을 확보할 수 있었다. 이런 좋은 툴을 알게 되어서 아주 기쁘다.</p>

<h5 id="cli-구축">cli 구축</h5>

<p>cli 환경에서 이벤트의 예약 리스트 및 상세 예약 내역을 조회할 수 있도록 구현하는 과제를 받았다. 과제의 의도는 코드리뷰때 받았던 지적과 맥을 함께 한다. 이 과제는 컨트롤러와 서비스의 책임 분리가 잘 되어있어야 쉽게 구현할 수 있기 때문이다. 만약 그렇지 않다면 이 과제를 통해서 책임을 올바르게 분리하라는 의도로 과제를 내주신 것 같다. 서비스는 인터페이스 환경과 무관하게 비즈니스 로직을 처리하는 역할만 수행해야 한다. 만약 서비스 레이어에 웹과 관련된 컴포넌트가 들어오게 된다면 cli에서는 재사용할 수 없게 될 가능성이 높아진다. 사실 처음에는 이 과제의 의도가 도대체 뭘까 생각을 했는데, 의도를 들은 순간 무릎을 탁! 치게 됐다. 다시 한 번 각 레이어의 책임에 대해서 생각해볼 수 있었다.</p>

<h3 id="sprint7---스케일-아웃">sprint7 - 스케일 아웃</h3>

<hr />

<p>sprint7때는 웹 서버가 여러 대로 늘어나는 상황에 대해서 배웠다. 그리고 그런 상황에서 필요한 것들을 사전준비하는 느낌의 과제들을 진행했다.</p>

<h5 id="세션의-구현">세션의 구현</h5>

<p>세션을 직접 구현하라는 과제가 주어졌다. 웹 서버가 여러 대로 늘어나게 되면 세션을 어떻게 관리할지가 큰 이슈가 된다. 여러 방법이 있지만 이번 교육에서는 여러 웹 서버가 공유해서 사용할 수 있는 세션 스토리지를 만드는 방식을 채택했다. 여기에 추가적으로 세션 스토리지를 db, redis 두 가지 스토리지로 구현해야 된다는 조건이 붙었다. 우리 TF는 세션을 관리하는 데 필요한 기능들을 추상화하여 인터페이스로 먼저 뽑아내고 db session과 redis session이라는 구현체를 만드는 방식으로 진행했다. redis는 처음 접해봤고 심지어 세션기능도 직접 만들어보는 건 처음이라서 아주 재밌었던 과제였다.</p>

<h5 id="object-storage">object storage</h5>

<p>기존에는 웹 서버가 하나였기 때문에 뮤지컬 이미지와 같은 리소스들은 서버에서 별도의 디렉토리를 만들어서 관리했다. 하지만 여러 노드에 웹 서버가 운영되면 웹 서버가 공통적으로 참조해야 할 스토리지가 필요해진다. 그래서 nhn cloud의 object storage에서 이미지를 관리하는 방식으로 변경하라는 과제가 주어졌다. 특정 운영 서버가 아닌 클라우드 환경에 별도 저장을 하게 되기 때문에 문제가 해결된다. api 이용 가이드도 너무 잘 돼있어서 금방 적용할 수 있었다.</p>

<h5 id="deploy를-이용한-배포">deploy를 이용한 배포</h5>

<p>배포를 nhn cloud의 deploy를 이용해서 하는 방식으로 바꾸라는 과제도 주어졌다. 기존에는 서버에 직접 접근해서 스크립트를 실행하여 배포를 진행했는데 deploy를 이용하면 간단한 설정과 시나리오를 적용해서 클릭 한 번으로 배포를 완료할 수 있게 된다. 배포에 대한 부담감이 줄어들어서 개발한 내용을 좀 더 빠르게 적용할 수 있게 된 것 같다.</p>

<p>회고 끝!</p>
:ET