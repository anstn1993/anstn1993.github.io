<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="https://anstn1993.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://anstn1993.github.io/" rel="alternate" type="text/html" /><updated>2021-03-23T17:58:15+09:00</updated><id>https://anstn1993.github.io/feed.xml</id><title type="html">MunSooKim’s devlog</title><subtitle>일상, 회고, 개발 지식을 기록하기 위한 공간 입니다.</subtitle><entry><title type="html">AJP - Tomcat과 Apache의 만남</title><link href="https://anstn1993.github.io/2020/03/22/ajp-tomcat%EA%B3%BC-apache%EC%9D%98-%EB%A7%8C%EB%82%A8.html" rel="alternate" type="text/html" title="AJP - Tomcat과 Apache의 만남" /><published>2020-03-22T00:00:00+09:00</published><updated>2020-03-22T00:00:00+09:00</updated><id>https://anstn1993.github.io/2020/03/22/ajp-tomcat%EA%B3%BC-apache%EC%9D%98-%EB%A7%8C%EB%82%A8</id><content type="html" xml:base="https://anstn1993.github.io/2020/03/22/ajp-tomcat%EA%B3%BC-apache%EC%9D%98-%EB%A7%8C%EB%82%A8.html">&lt;p&gt;이번 글에서는 Tomcat과 Apache가 어떻게 연결되는지에 대해서 간단하게 살펴보겠습니다. 여기서 Apache는 Tomcat의 앞단에 위치한 Proxy 서버가 됩니다.&lt;/p&gt;

&lt;h2 id=&quot;tomcat의-connector&quot;&gt;Tomcat의 Connector&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Tomcat이 외부의 요청을 어떻게 받는지 먼저 살펴보겠습니다. Tomcat은 다양한 컴포넌트들로 구성이 되는데, 그중 Catalina가 외부 요청을 받을 수 있게 처리하는 컴포넌트가 Connector입니다. Connector는 하나의 서비스 내에서 여러 개로 구성될 수 있으며 각각 요청을 받아서 적절한 Context(Web Application)로 요청을 전달해 주고 동적으로 생성된 응답 콘텐츠를 받아서 응답해 주는 역할을 수행합니다.&lt;/p&gt;

&lt;p&gt;각각의 Connector들이 위와 같은 역할을 수행하기 위해서는 기본적으로 2가지를 설정해줘야 합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;요청을 listen하기 위한 포트 번호&lt;/li&gt;
  &lt;li&gt;통신 프로토콜&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;위와 같은 Connector 설정은 Tomcat의 주요 설정 파일 중 하나인 server.xml에서 하게 됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;server.xml&lt;/p&gt;

    &lt;div class=&quot;language-tex highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Server&amp;gt;
    &amp;lt;Service&amp;gt;
        &amp;lt;Connector port=&quot;8000&quot; protocol=&quot;HTTP/1.1&quot;/&amp;gt;
        &amp;lt;Connector port=&quot;8001&quot; protocol=&quot;HTTP/1.1&quot;/&amp;gt;

        &amp;lt;Engine&amp;gt;
            &amp;lt;Host name=&quot;yourhostname&quot;&amp;gt;
                &amp;lt;Context path=&quot;/webapp1&quot;/&amp;gt;
                &amp;lt;Context path=&quot;/webapp2&quot;/&amp;gt;
            &amp;lt;/Host&amp;gt;
        &amp;lt;/Engine&amp;gt;
    &amp;lt;/Service&amp;gt;
&amp;lt;/Server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Server 엘리먼트의 하위 엘리먼트로는 Service 엘리먼트가 들어가고 이 엘리먼트의 하위 엘리먼트로 Connector 엘리먼트와 Engine 엘리먼트가 들어가게 됩니다. 위의 설정을 살펴보면 Tomcat 서버의 Connector는 두 개가 되고 8000, 8001번 포트에서 요청을 listen하게 됩니다. 즉 저 두 포트로 요청을 보내면 Connector가 받아서 Engine으로 요청을 전달하게 됩니다.&lt;/p&gt;

    &lt;p&gt;아래와 같이 설정할 수도 있습니다.&lt;/p&gt;

    &lt;div class=&quot;language-tex highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Server&amp;gt;
    &amp;lt;Service name=&quot;Catalina8000&quot;&amp;gt;
        &amp;lt;Connector port=&quot;8000&quot; protocol=&quot;HTTP/1.1&quot;/&amp;gt;
        &amp;lt;Engine&amp;gt;
            &amp;lt;Host name=&quot;yourhostname&quot;&amp;gt;
                &amp;lt;Context path=&quot;/webapp1&quot;/&amp;gt;
            &amp;lt;/Host&amp;gt;
        &amp;lt;/Engine&amp;gt;
&amp;lt;/Service&amp;gt;
&amp;lt;Service name=&quot;Catalina8001&quot;&amp;gt;
        &amp;lt;Connector port=&quot;8001&quot; protocol=&quot;HTTP/1.1&quot;/&amp;gt;
        &amp;lt;Engine&amp;gt;
            &amp;lt;Host name=&quot;yourhostname&quot;&amp;gt;
                &amp;lt;Context path=&quot;/webapp2&quot;/&amp;gt;
            &amp;lt;/Host&amp;gt;
        &amp;lt;/Engine&amp;gt;
&amp;lt;/Service&amp;gt;
&amp;lt;/Server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;한 서버에서 두 개의 Service를 구성하고 각각 Connector를 구성하여 포트별로 요청이 전달되는 Engine이 달라지게 구성할 수도 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ajp&quot;&gt;AJP&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;앞서 Connector의 통신 프로토콜을 설정할 수 있다고 언급했습니다. 대표적으로 두 가지 타입이 있는데 하나가 우리에게 익숙한 HTTP이고, 다른 하나가 AJP라는 녀석입니다.&lt;/p&gt;

&lt;h4 id=&quot;http-connector&quot;&gt;HTTP Connector&lt;/h4&gt;

&lt;p&gt;Tomcat은 그 자체만으로 독립적 웹 서버로 작동합니다. 그게 가능한 이유가 바로 HTTP Connector라는 컴포넌트가 있기 때문입니다. HTTP Connector는 HTTP/1.1 버전을 지원하면서 웹상의 HTTP 요청을 모두 받아줍니다.&lt;/p&gt;

&lt;h4 id=&quot;ajp-connector&quot;&gt;AJP Connector&lt;/h4&gt;

&lt;p&gt;AJP는 Apache JServ Protocol의 약자로 Apache 웹 서버와 통신을 하기 위해서 고안된 HTTP 바이너리 프로토콜입니다. 즉 AJP Connector는 Apache를 통해서 전달되는 요청을 받아서 처리하는 역할을 담당하는 특화된 Connector라고 볼 수 있습니다. 당연히 Apache와의 연동이기 때문에 양쪽 모두에 별도의 설정을 해줘야 합니다.&lt;/p&gt;

&lt;h2 id=&quot;ajp-configuration&quot;&gt;AJP Configuration&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Apache와 Tomcat의 연동을 위한 설정을 살펴보겠습니다.&lt;/p&gt;

&lt;h4 id=&quot;tomcat-configuration&quot;&gt;Tomcat Configuration&lt;/h4&gt;

&lt;p&gt;먼저 상대적으로 간단한 Tomcat부터 살펴보겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;server.xml
    &lt;div class=&quot;language-tex highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;Server&amp;gt;
    &amp;lt;Service name=&quot;Catalina&quot;&amp;gt;
        &amp;lt;Connector port=&quot;8001&quot; protocol=&quot;AJP/1.3&quot;/&amp;gt;
        &amp;lt;Engine name=&quot;Catalina&quot;&amp;gt;
            &amp;lt;Host name=&quot;localhost&quot;/&amp;gt;
                &amp;lt;Context path=&quot;/&quot;/&amp;gt;
            &amp;lt;/Host&amp;gt;
        &amp;lt;/Engine&amp;gt;
    &amp;lt;/Service&amp;gt;
&amp;lt;/Server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Connector의 프로토콜을 AJP로 설정해 줬고 포트는 8001번으로 설정했습니다. 간단하죠?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;apache-configuration&quot;&gt;Apache Configuration&lt;/h4&gt;

&lt;p&gt;Apache에서 필요한 설정을 살펴보겠습니다.&lt;/p&gt;

&lt;h5 id=&quot;1-mod_jk-다운로드&quot;&gt;1. mod_jk 다운로드&lt;/h5&gt;

&lt;p&gt;mod_jk는 Apache의 HTTPD가 Tomcat과 AJP 프로토콜로 통신을 할 수 있게 해주는 Apache 모듈입니다. 이 모듈을 다운로드합니다. (&lt;a href=&quot;http://tomcat.apache.org/download-connectors.cgi&quot;&gt;mod_jk 다운로드 링크&lt;/a&gt;)&lt;/p&gt;

&lt;h5 id=&quot;2-mod_jk-설치&quot;&gt;2. mod_jk 설치&lt;/h5&gt;

&lt;p&gt;다운로드된 패키지에 있는 mod_jk 모듈을 찾아서 그 파일을 Apache의 modules 디렉터리로 옮겨줍니다.(리눅스의 경우 mod_jk.so, 윈도우의 경우 mod_jk.dll)&lt;/p&gt;

&lt;h5 id=&quot;3-httpdconf-설정&quot;&gt;3. httpd.conf 설정&lt;/h5&gt;

&lt;p&gt;모듈을 옮겨줬으면 설정 파일에서 그 모듈을 사용하겠다고 선언을 해야 합니다. 아래에 나오는 설정은 mod_jk 모듈이 정상적으로 동작하는 데 필요한 설정들입니다.(각종 파일들의 경로는 예시로 작성된 것이기 때문에 실제 자신의 파일의 경로를 넣어주면 됩니다.)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;httpd.conf&lt;/p&gt;

    &lt;div class=&quot;language-tex highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Load the mod&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;jk module.
LoadModule    jk&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;module  path/to/mod&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;jk.so

# Declare the module for use with the &amp;lt;IfModule directive&amp;gt; element.  (This only applies to versions of HTTPD below 2.x.  For 2.x and above, REMOVE THIS LINE.)
AddModule     mod&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;jk.c

# Set path to workers.properties. We will create this file in the next step.  The file will be placed in the same directory as httpd.conf.
JkWorkersFile /path/to/httpd/conf/workers.properties

# Set path to jk shared memory.  Generally, you&apos;ll want this to point to your local state or logs directory.
JkShmFile     /path/to/log/httpd/mod&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;jk.shm

# Set path to jk logs.  This path should point to the same logs directory as the HTTPD access&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;log.
JkLogFile     /path/to/log/httpd/mod&lt;span class=&quot;p&quot;&gt;_&lt;/span&gt;jk.log

# Set the jk log level.  Valid values for this setting are &apos;debug&apos;, &apos;error&apos;, or &apos;info&apos;.
JkLogLevel    level

# Set timestamp log format.  Use provided variables to customize.
JkLogStampFormat &quot;[&lt;span class=&quot;c&quot;&gt;%a %b %d %H:%M:%S %Y] &quot;&lt;/span&gt;

# Map a worker to a namespace.  Workers represent Tomcat instances that are listening for requests.  We&apos;ll configure these in the next section.  For the sake of this example, Tomcat&apos;s &quot;examples&quot; context is used, and a default worker named &apos;worker1&apos;, which we will create in Step 4, is designated.  Multiple JkMount attributes can be used simultaneously.
JkMount  /examples/* worker1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;위의 설정에서 JkMount를 보면 worker에 대한 mapping 설정이 존재합니다. Worker는 Tomcat 인스턴스를 의미합니다. 위의 설정을 해석해보자면 /examples/ 이하로 들어오는 요청은 모두 worker1로 라우팅을 해주라는 의미가 됩니다. 즉 요청이 들어오면 ajp로 Tomcat에게 요청을 전달하라는 의미입니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;4-worker-설정&quot;&gt;4. Worker 설정&lt;/h5&gt;

&lt;p&gt;3번에서 JkMount 설정으로 worker1을 지정해 줬지만 그 Worker에 대한 정보가 아직 존재하지 않습니다. Worker에 대한 정보는 workers.properties에서 설정하게 됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;workers.properties
    &lt;div class=&quot;language-tex highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;worker.list=worker1
worker.worker1.type=ajp13
worker.worker1.host=localhost
worker.worker1.port=8001
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;worker.list: Worker의 namespace를 지정합니다. 복수의 Worker를 지정하고 싶다면 ‘,’를 쓰고 이어나가면 됩니다.&lt;/li&gt;
      &lt;li&gt;worker.worker1.type: worker1과의 통신 프로토콜을 지정합니다.&lt;/li&gt;
      &lt;li&gt;worker.worker1.host: worker1의 주소를 지정합니다.&lt;/li&gt;
      &lt;li&gt;worker.worker1.port: worker1의 포트번호를 지정합니다. 앞선 Tomcat설정에서 AJP Connector의 포트 번호를 8001로 설정했습니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;여기까지가 Apache와 Tomcat이 AJP를 통해서 통신하기 위한 기본적인 설정 입니다.&lt;/p&gt;

&lt;h2 id=&quot;마치며&quot;&gt;마치며&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;기술교육 프로젝트의 웹 서버 구성이 Apache + Tomcat이었는데 정확히 어떻게 연동이 되는지 잘 모르고 사용을 해왔던 터라 공부 차원에서 이 글을 작성합니다. 위의 설정들은 정말 기본적인 설정들이고 그 외에도 사용자의 니즈에 따른 다양한 설정들이 가능합니다. 이런 설정들도 앞으로 개발을 하면서 하나하나 익혀야겠다는 생각이 듭니다.&lt;/p&gt;

&lt;p&gt;읽어주셔서 감사합니다!&lt;/p&gt;</content><author><name>Mun Soo Kim</name></author><category term="기술" /><summary type="html">이번 글에서는 Tomcat과 Apache가 어떻게 연결되는지에 대해서 간단하게 살펴보겠습니다. 여기서 Apache는 Tomcat의 앞단에 위치한 Proxy 서버가 됩니다.</summary></entry><entry><title type="html">객체지향 정리</title><link href="https://anstn1993.github.io/2020/03/09/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%A0%95%EB%A6%AC.html" rel="alternate" type="text/html" title="객체지향 정리" /><published>2020-03-09T00:00:00+09:00</published><updated>2020-03-09T00:00:00+09:00</updated><id>https://anstn1993.github.io/2020/03/09/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%A0%95%EB%A6%AC</id><content type="html" xml:base="https://anstn1993.github.io/2020/03/09/%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%EC%A0%95%EB%A6%AC.html">&lt;p&gt;이번 글에서는 최범균님이 집필하신 [개발자가 반드시 정복해야 할 객체 지향과 디자인 패턴]이라는 책의 객체 지향 파트에 대해서 정리해보려고 합니다.&lt;/p&gt;

&lt;h3 id=&quot;객체-지향&quot;&gt;객체 지향&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;객체 지향은 데이터를 중심으로 한 프로시저로 구성되는 절차 지향과 달리 ‘데이터와 데이터와 관련된 프로시저로 구성되는 객체’라는 단위로 프로그램이 구성됩니다. 데이터와 프로시저가 하나의 객체로 격리되는 것이 어떤 효과를 가져오는지 하나씩 살펴보겠습니다.&lt;/p&gt;

&lt;h5 id=&quot;객체&quot;&gt;객체&lt;/h5&gt;

&lt;p&gt;객체가 데이터와 프로시저로 구성된다고 했는데 여기서 핵심은 데이터가 아니라 객체가 제공하는 ‘기능’입니다. 데이터는 기능의 동작에 필요한 재료일 뿐이고 외부에서는 객체가 어떤 데이터를 가지는지는 관심이 없습니다. 단지 어떤 기능을 제공해주는지에 관심을 가질 뿐입니다. 객체가 제공하는 기능을 오퍼레이션이라고 부르고 이런 오퍼레이션의 집합을 인터페이스라고 부릅니다. 여기서의 인터페이스는 엄밀히 말하면 자바와 같은 언어에서 제공하는 인터페이스와는 다른 개념입니다. 객체 지향에서의 인터페이스는 객체를 사용하기 위한 일종의 설명서, 명세를 칭하는 개념적인 용어라고 생각하면 됩니다. 물론 언어 차원에서 제공하는 인터페이스가 그런 역할을 수행하긴 합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h5 id=&quot;객체의-책임과-크기&quot;&gt;객체의 책임과 크기&lt;/h5&gt;

&lt;p&gt;앞서 객체는 객체가 제공하는 기능으로 자신을 표현한다고 했습니다. 이는 다른 말로 객체는 자신만의 ‘책임’을 가진다는 것을 의미합니다. 객체가 어떤 책임을 얼마나 가질지를 결정하는 것이 객체 지향 설계의 출발점이라고 볼 수 있습니다. 사실 어떤 객체에게 어떤 책임을 부여할지에 대한 정답은 없기 때문에 적절한 책임 분배는 매우 어려운 과정이고 많은 경험을 요하지만 한 가지 확실한 규칙이 존재합니다. 바로 &lt;strong&gt;객체가 갖는 책임의 크기는 작으면 작을수록 좋다&lt;/strong&gt;는 것입니다. 이 이유는 책임이 커질수록 절차지향에 가까워지기 때문인데요. 책임의 크기가 커져서 객체가 담당하는 기능이 많아지면 각 기능들이 데이터를 공유할 가능성이 높아지고 이는 결국 기능 변경의 어려움으로 이어지게 됩니다. 이는 뒤에서 살펴볼 객체 지향 설계 원칙 중 &lt;strong&gt;SRP(Single Responsibility priciple)&lt;/strong&gt; 와 연관됩니다.&lt;/p&gt;

&lt;h5 id=&quot;의존&quot;&gt;의존&lt;/h5&gt;

&lt;p&gt;A 객체가 B 객체를 생성하거나 기능을 호출해서 사용하게 되면 A 객체가 B 객체에 의존한다고 표현합니다. 이는 B 객체의 타입이 변경되면 A 객체에도 변경이 발생할 가능성이 높다는 것을 의미합니다. 이처럼 의존의 영향은 꼬리를 물면서 전파된다는 특징을 가집니다. 그래서 의존은 다음과 같은 양면성을 가집니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;내가 변경되면 나에게 의존하고 있는 코드에 영향을 준다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;나의 요구사항이 변경되면 내가 의존하고 있는 타입에 영향을 준다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;만약 순환 의존이 발생하게 되면 이를 적극적으로 해소할 수 있는 방법을 찾아야 합니다. 순환 의존이 발생하지 않도록 하는 설계 원칙 중 하나가 &lt;strong&gt;DIP(Dependency Inversion Principle)&lt;/strong&gt; 입니다.&lt;/p&gt;

&lt;h5 id=&quot;캡슐화&quot;&gt;캡슐화&lt;/h5&gt;

&lt;p&gt;캡슐화는 객체 내부의 구현을 감추는 것을 의미합니다. 즉 내부 구현이 어떻게 바뀌든 그 기능을 사용하는 쪽의 코드에 영향을 주지 않도록 하는 것이 캡슐화의 핵심입니다. 이는 기능 &lt;strong&gt;내부 구현의 유연성&lt;/strong&gt;을 높혀줍니다. 캡슐화가 이루어지지 않았을 때 생기는 문제를 살펴보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expiryDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// getter, setter&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;SessionDependentA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;operate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 세션 만료 검사&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExpiryDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBefore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;SessionDependentB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;operate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 세션 만료 검사&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExpiryDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBefore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;SessionDependentC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;operate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 세션 만료 검사&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getExpiryDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBefore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;세션을 관리하는 객체 session을 여러 클래스가 의존하고 있습니다. 그리고 session의 만료 여부를 검사하는 기능이 모든 클래스에서 중복되어서 사용되고 있습니다. 위의 코드는 캡슐화가 전혀 이루어지지 않은 코드 입니다. 세션 만료 검사 기능을 사용하는 쪽에 구현이 그대로 노출되어 있기 때문입니다. 이는 세션 만료 검사 기능의 수정이 필요해질 때 그 기능을 사용하는 쪽의 코드를 모두 수정해줘야 함을 의미합니다. 예시에서는 3개에 불과해서 시간이 얼마 안 걸리겠지만 그 수가 100개로 늘어나기라도 하면 수정에 훨씬 오랜 시간을 써야 합니다. 그리고 세션의 expiryDate라는 데이터를 이용한 기능 구현을 하고 있기 때문에 절차지향적으로 작성된 코드 입니다. 이제 캡슐화를 적용해서 구현해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocalDateTime&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expiryDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// getter, setter&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isExpired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;expiryDate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isBefore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocalDateTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;SessionDependentA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;operate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 세션 만료 검사&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isExpired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;SessionDependentB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;operate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 세션 만료 검사&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isExpired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;SessionDependentC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;operate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 세션 만료 검사&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isExpired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;세션 만료 검사 기능을 Session 클래스 내부로 감추고 Session에 의존하고 있는 클래스들은 이제 더 이상 Session의 데이터가 아닌 기능을 호출해서 세션 만료 검사를 수행하고 있습니다. 의존하고 있는 클래스 입장에서는 세션 만료 검사 기능이 어떻게 구현되어 있는지 알 수 없습니다. 구현의 변경 여파가 완전히 Session 클래스 범위로 격리됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;위와 같은 캡슐화는 두 가지 규칙만 지키면 거의 알아서 구현이 됩니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Tell, Don’t Ask
이 원칙은 ‘데이터’를 물어보지 말고 ‘기능을 실행해’라고 말하라는 의미입니다. 위의 예시에서 캡슐화가 일어나지 않았던 코드에서는 session의 만료 일자 데이터를 getter로 받아와서 기능을 구현했지만, 캡슐화가 일어났던 코드에서는 session의 세션 만료 검사 기능을 바로 호출했습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;데미테르의 원칙
이 원칙은 1번 규칙을 따를 수 있게 만들어주는 규칙입니다. 이 원칙은 다시 다음의 규칙들로 구성됩니다.&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;메서드에서 생성한 객체의 메서드만 호출&lt;/li&gt;
      &lt;li&gt;파라미터로 받은 객체의 메서드만 호출&lt;/li&gt;
      &lt;li&gt;필드로 참조하는 객체의 메서드만 호출&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;다형성과-추상-타입&quot;&gt;다형성과 추상 타입&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;캡슐화는 내부 구현의 유연성을 높여줍니다. 그렇다면 외부 구현의 유연성은 어떻게 높일 수 있을까요? 바로 &lt;strong&gt;추상화&lt;/strong&gt;를 통해서 높일 수 있습니다. 추상화가 어떻게 이루어지는지 살펴보겠습니다.&lt;/p&gt;

&lt;h5 id=&quot;다형성&quot;&gt;다형성&lt;/h5&gt;

&lt;p&gt;다형성은 한 객체가 여러 타입을 가질 수 있는 것을 의미합니다. 자바의 경우에는 상속을 통해서 다형성을 구현할 수 있는데요. 이때 클래스를 상속할 수도, 인터페이스를 상속할 수도 있습니다.&lt;/p&gt;

&lt;h5 id=&quot;추상화&quot;&gt;추상화&lt;/h5&gt;

&lt;p&gt;추상화는 논리적으로 비슷한 데이터나 기능을 담당하는 여러 객체들이 있을 때 공통분모를 뽑아내서 명세화하는 과정입니다. 예를 들면 세션 기능을 구현하기 위해서는 다음의 기능이 필요할 겁니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;세션의 생성&lt;/li&gt;
  &lt;li&gt;만료여부 검사&lt;/li&gt;
  &lt;li&gt;세션의 만료&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이렇게 어떤 대상체가 공통체가 어떤 역할을 수행하는지 뽑아내는 이 과정 자체가 추상화라고 볼 수 있습니다. 그리고 추상화된 타입은 구현을 제공할 수는 없기 때문에 보통 자바의 경우 인터페이스로 표현을 합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isExpired&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invalidate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 추상화된 타입만으로는 세션이 db로 구현이 될지, redis같은 in-memory cache db로 구현이 될지 알 수 없습니다. 다만 어떤 구현체가 되었든 추상 타입의 오퍼레이션이 기능으로서 필요하다는 것은 알 수 있습니다. 그리고 추상 타입과 실제 구현 클래스는 상속을 통해서 연결이 됩니다.&lt;/p&gt;

&lt;p&gt;그리고 앞서 살펴본 다형성 때문에 추상 타입만으로도 실제 콘크리트 클래스(구현 클래스)의 기능들을 호출할 수 있게 됩니다. 바로 이 지점에서 외부 구현의 유연성이 확보됩니다. 추상화된 기능을 사용하는 쪽의 코드는 추상 타입으로 의존하게 되면 콘크리트 클래스가 변경되더라도 코드 변경 없이 변경된 콘크리트 클래스의 기능을 실행할 수 있기 때문입니다.&lt;/p&gt;

&lt;p&gt;이처럼 추상화는 논리적인 기능은 비슷하지만 그 기능을 구현하는 방식이 &lt;strong&gt;변화될 가능성이 높은 영역에 적용&lt;/strong&gt;하면 유연하게 대처할 수 있게 됩니다. 변경 가능성이 희박한 곳까지 추상화를 진행하는 것은 오히려 코드의 복잡도만 높이게 되니 지양해야 합니다.&lt;/p&gt;

&lt;h3 id=&quot;객체지향-설계-원칙-solid&quot;&gt;객체지향 설계 원칙: SOLID&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;지금부터 객체 지향 설계의 5가지 원칙인 SOLID에 대해서 살펴보겠습니다. 이 원칙들은 앞에서 살펴본 내용들을 기반으로 만들어졌기 때문에 앞의 내용들을 꼭 이해하는 과정이 필요할 것 같습니다.&lt;/p&gt;

&lt;p&gt;SOLID는 5가지 원칙의 맨 앞글자만 따서 만든 용어 입니다. 그리고 각각의 규칙들은 상호 연관되기 때문에 개별적 이해보단 종합적인 이해가 필요할 것 같습니다. 그럼 각각의 규칙들을 살펴보겠습니다.&lt;/p&gt;

&lt;h5 id=&quot;single-responsibility-principle단일-책임-원칙&quot;&gt;Single Responsibility Principle(단일 책임 원칙)&lt;/h5&gt;

&lt;p&gt;앞서 객체의 책임에 대해서 살펴봤는데요. 단일 책임 원칙은 말 그대로 클래스는 단 하나의 책임만을 가져야 한다는 것을 의미합니다. 객체가 여러 개의 책임을 가지게 책임의 개수만큼 변경의 이유가 생기는 것이고, 이는 다른 원칙들의 효과에도 영향을 미치기 때문에 최대한 지켜져야 하는 원칙입니다.&lt;/p&gt;

&lt;p&gt;http 프로토콜로 데이터를 읽고 화면에 보여주는 기능이 필요하다고 가정해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataViewer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadHtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;updateGui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadHtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;HttpClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HttpClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateGui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;GuiData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guiModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseDataToGuiData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tableUI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;changeData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guiModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드는 display()가 호출되면 loadHtml()이 호출되고, updateGui()가 호출되는 구조를 가집니다. 만약 여기서 데이터를 http가 아닌 소켓으로 가져와야 하고 데이터의 타입도 string이 아닌 바이트 배열로 바뀌게 된다면 위의 코드는 display()부터 시작해서 연쇄적으로 바뀌게 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataViewer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadHtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;updateGui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadHtml&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;SocketClient&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SocketClient&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateGui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;GuiData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guiModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseDataToGuiData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tableUI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;changeData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guiModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런 연쇄적인 코드 수정이 발생한 이유는 데이터를 읽는 책임과 화면에 뿌려주는 책임이 하나의 클래스에 몰려있기 때문입니다. 이렇게 책임의 개수가 많아지게 되면 기능 간에 데이터가 공유될 가능성이 높아지고 이는 결국 코드를 절차지향적으로 만들게 됩니다. 그럼 이제 두 책임을 두 개의 클래스로 분리하고 데이터까지 추상화하여 작성해보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataViewer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// 데이터 읽기 책임을 담당하는 객체&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DataLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;updateGui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateGui&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Data&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;GuiData&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;guiModel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parseDataToGuiData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tableUI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;changeData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;guiModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;DataLoader라는 추상 타입을 사용해서 데이터를 가져오던 책임을 넘겼습니다. 이제 데이터를 어떤 방식으로 가져오든 DataViewer는 그 구현을 알 수 없게 됐고, 코드에도 아무런 변화가 생기지 않습니다.&lt;/p&gt;

&lt;p&gt;이처럼 책임은 변화하는 부분과 관련됩니다. 데이터를 가져오는 방식이 http에서 소켓으로 변경되면서 기능에 많은 변화가 생겼습니다. 이는 데이터를 가져오는 책임은 분리되어야 한다는 강한 신호가 됩니다.&lt;/p&gt;

&lt;h5 id=&quot;open-closed-principle개방-폐쇄-원칙&quot;&gt;Open-Closed principle(개방-폐쇄 원칙)&lt;/h5&gt;

&lt;p&gt;이 원칙은 다음의 두 가지를 의미합니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;기능을 변경하거나 확장할 수 있으면서&lt;/li&gt;
  &lt;li&gt;그 기능을 사용하는 코드는 수정하지 않는다.
즉 기능 확장에는 열려있어야 하고, 그 기능을 사용하는 쪽의 변경에는 닫혀있어야 함을 의미합니다. 이는 앞서 샆펴봤던 추상화와 관련됩니다. 추상 타입의 콘크리트 클래스는 언제든지 추가될 수 있습니다. 하지만 그것이 추상 타입에 의존하고 있는, 즉 기능을 사용하는 쪽의 코드 수정을 유발하지는 않습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그럼 개방 폐쇄의 원칙이 깨질 때 발생하는 증상들은 무엇일까요?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;다운 캐스팅을 한다.(이는 다음에 살펴볼 리스코프 치환 원칙과도 관련됩니다.)&lt;/li&gt;
  &lt;li&gt;비슷한 로직의 if-else 블록들이 반복된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;liskov-substitution-principle리스코프-치환-원칙&quot;&gt;Liskov Substitution principle(리스코프 치환 원칙)&lt;/h5&gt;

&lt;p&gt;이 원칙은 개방-폐쇄 원칙을 지탱해주는 다형성에 관한 원칙을 제공합니다. 이 원칙은 상위 타입의 객체를 하위 타입의 객체로 치환해도 상위 타입을 사용하는 프로그램은 정상적으로 동작해야 함을 의미합니다. 코드로 보면 좀 더 이해하기 쉽습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;//특정 메서드가 상위 타입인 SuperClass를 사용합니다.&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SuperClass&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;//실제로 인자 전달은 하위 타입 클래스로 전달합니다.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;someMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SubClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위의 코드가 문제 없이 동작해야 리스코프 치환 원칙을 지켰다고 할 수 있습니다. 이 원칙도 다형성의 측면에서 생각해보면 어렵지 않습니다. 추상 타입과 콘크리트 클래스의 관계도 결국 상위 타입과 하위 타입의 관계라고 할 수 있고, 위의 코드는 상위 타입인 추상 타입으로 기능을 실행할 때 실제 콘크리트 클래스의 기능이 실행되는 것과 다르지 않기 때문입니다.&lt;/p&gt;

&lt;p&gt;하지만 추상 타입과 콘크리트 클래스의 관계만이 상위 타입과 하위 타입의 관계를 모두 대변하는 건 아닙니다. 구현이 모두 존재하는 두 클래스 간의 관계에서는 이런 리스코프 치환의 원칙을 더 잘 적용해야 합니다. 대표적인 문제가 직사각형-정사각형 문제 입니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 코드가 있을 때 Square는 Rectangle의 하위 타입입니다. 그리고 Rectangle에 의존하는 클래스의 메서드를 살펴보겠습니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;increaseHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Rectangle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setHeight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWidth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이 코드에서 increaseHeight() 코드는 항상 width 값보다 height값이 더 크다고 기대할 것입니다. 하지만 파라미터로 Rectangle의 하위 타입인 Square가 전달되면 width, height는 같은 값이 됩니다. 즉 하위 타입의 객체를 하위 타입의 객체로 치환했을 때 상위 타입에 의존하고 있는 쪽에 문제가 생긴 것입니다. 이는 Rectangle이라는 상위 타입에 의존하고 있는 incresaseHeight() 메서드가 Rectangle의 확장에 열려있지 않다는 것을 의미합니다.&lt;/p&gt;

&lt;p&gt;이 예제가 주는 교훈은 논리적으로, 개념적으로는 상속 관계처럼 보이는 두 객체가 실제 구현에서는 상속 관계가 아닐 수 있음을 보여줍니다. 이럴 때는 별개의 타입으로 분리를 해서 구현해야 합니다.&lt;/p&gt;

&lt;p&gt;이외에도 리스코프 치환 원칙을 어기는 사례는 많습니다. 대표적으로 상위 타입에서 지정한 리턴 타입 범위의 값을 벗어나는 값을 하위 타입이 리턴하는 경우 입니다. 이렇게 되면 상위 타입에 의존하는 쪽에서 하위 타입의 콘크리트 클래스로 값을 받았을 때 기대하지 않았던 값을 바게 되어서 예상치 못한 문제가 발생할 수 있습니다.&lt;/p&gt;

&lt;p&gt;이처럼 리스코프 치환 원칙은 일종의 계약과도 같습니다. 하위 타입은 상위 타입이 정해둔 명세에 벗어난 구현을 하면 안 됩니다. 그런 것들에 대한 예외적인 허용을 위해서 instanceof와 같은 연산자로 타입 검사를 하는 경우 리스코프 치환 원칙을 어기고 있다고 볼 수 있습니다.&lt;/p&gt;

&lt;h5 id=&quot;interface-segregation-principle인터페이스-분리-원칙&quot;&gt;Interface Segregation Principle(인터페이스 분리 원칙)&lt;/h5&gt;

&lt;p&gt;이 원칙은 인터페이스는 그 인터페이스를 사용하는 클라이언트를 기준으로 분리해야 한다는 의미를 갖습니다. 이 원칙은 단일 책임 원칙과 관련됩니다. 단일 책임이 아닌 경우 하나의 기능 변화가 다른 기능에까지 연쇄적인 영향을 미치는 것을 앞에서 확인했습니다. 그렇기 때문에 이런 인터페이스에 의존하는 쪽의 코드도 바뀔 가능성이 높아지기 때문에 클라이언트 입장에서 사용하는 기능만 제공할 수 있도록 인터페이스를 잘 분리하는 것이 중요합니다.&lt;/p&gt;

&lt;h5 id=&quot;dependency-inversion-principle의존-역전-원칙&quot;&gt;Dependency Inversion Principle(의존 역전 원칙)&lt;/h5&gt;

&lt;p&gt;의존 역전 원칙은 고수준 모듈은 저수준 모듈의 구현에 의존해서는 안 된다는 의미를 갖습니다. 이는 저수준 모듈이 고수준 모듈의 추상 타입에 의존해야 한다는 것을 의미하기도 합니다. 여기서 고수준 모듈이란 논리적으로 의미가 있는 단일 기능을 제공하는 모듈이라고 보면 되고, 저수준 모듈은 고수준 모듈의 그 의미 있는 단일 기능을 구현하기 위해서 필요한 하위 기능의 실제 구현 모듈이라고 보면 됩니다. 가령 고수준 모듈에서 바이트 데이터를 읽어와서 암호화를 한 후 결과 바이트 데이터를 쓰는 기능을 정의했다고 할 때, 저수준 모듈은 다음과 같이 세부적인 기능들을 구현해야 할 것입니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;파일에서 바이트 데이터를 읽어온다.&lt;/li&gt;
  &lt;li&gt;AES알고리즘으로 암호화한다.&lt;/li&gt;
  &lt;li&gt;파일에 바이터 데이터를 쓴다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;모두 고수준 모듈의 추상적으로 나열되었던 기능들이 구체화되어서 명시된 것을 확인할 수 있습니다.&lt;/p&gt;</content><author><name>Mun Soo Kim</name></author><category term="기술" /><summary type="html">이번 글에서는 최범균님이 집필하신 [개발자가 반드시 정복해야 할 객체 지향과 디자인 패턴]이라는 책의 객체 지향 파트에 대해서 정리해보려고 합니다.</summary></entry><entry><title type="html">nhn 기술교육 sprint6, 7 회고</title><link href="https://anstn1993.github.io/2020/03/09/nhn-%EA%B8%B0%EC%88%A0%EA%B5%90%EC%9C%A1-sprint6,7-%ED%9A%8C%EA%B3%A0.html" rel="alternate" type="text/html" title="nhn 기술교육 sprint6, 7 회고" /><published>2020-03-09T00:00:00+09:00</published><updated>2020-03-09T00:00:00+09:00</updated><id>https://anstn1993.github.io/2020/03/09/nhn-%EA%B8%B0%EC%88%A0%EA%B5%90%EC%9C%A1-sprint6,7-%ED%9A%8C%EA%B3%A0</id><content type="html" xml:base="https://anstn1993.github.io/2020/03/09/nhn-%EA%B8%B0%EC%88%A0%EA%B5%90%EC%9C%A1-sprint6,7-%ED%9A%8C%EA%B3%A0.html">&lt;p&gt;sprint6, 7에 대한 회고록이다. 짧은 시간 동안 개발을 마치고 sprint 6 때는 리팩토링, 테스트 코드 작성을 통한 소나 큐브 커버리지 높이기, 서비스의 cli 구축 등의 과제를 진행했고, sprint 7에서는 웹 서버의 스케일 아웃을 위한 여러 과제들을 진행했다.&lt;/p&gt;

&lt;h3 id=&quot;sprint6---개발만-했다고-끝이-아니다-꾸준한-개선의-연속&quot;&gt;sprint6 - 개발만 했다고 끝이 아니다. 꾸준한 개선의 연속&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;sprint 6의 메인 과제는 우리가 개발 기간에 작성한 덩어리 같은 코드들을 깨끗한, 유지 보수에 좀 더 용이한 코드로 개선하는 것이었다.&lt;/p&gt;

&lt;h5 id=&quot;코드리뷰&quot;&gt;코드리뷰&lt;/h5&gt;

&lt;p&gt;코드 리뷰를 처음 진행해봤다. 우리 TF는 이사님에게 리뷰를 받았는데 친절하고 유쾌하면서도 핵심은 놓치지 않고 콕콕 찌르는 지적을 받게 됐다. 많은 내용들을 배울 수 있었는데, 크게 코딩 스타일과 책임의 적절한 분리에 대해서 다시 생각해 보게 됐다. 특히 책임의 적절한 분리에 대해서 얘기를 해보자면, 서비스 레이어가 가져가야 할 책임이 컨트롤러 레이어에게 전가되고 있는 문제가 있었다. 이사님의 표현을 빌리자면 값싼 알바(?)인 컨트롤러는 흐름 제어라는 최소한의 역할만 수행하고 실제 비즈니스 로직은 고오급 인력(?)인 서비스가 담당하게 해야 한다. 앞으로는 이 내용을 잊지 않고 주의하면서 코딩을 해야겠다.&lt;/p&gt;

&lt;h5 id=&quot;소나큐브를-통한-코드-개선&quot;&gt;소나큐브를 통한 코드 개선&lt;/h5&gt;

&lt;p&gt;정적 분석 툴인 소나 큐브를 처음 접했다. 젠킨스로 우리 프로젝트를 빌드 하면 그 결과가 소나 큐브에 반영되는데 우리가 작성한 코드에 어떤 문제나 잠재적 위험이 존재하는지, 테스트 코드 커버리지는 얼마나 되는지 등의 정보를 제공해 준다. 이 툴을 이용해서 코드 개선 작업을 진행했다. 일차적으로 코드 스멜을 많이 없애는 작업을 진행했고, 이후에는 코드 리뷰 때 받은 지적사항들을 개선하는 작업을 진행했다. 그리고 junit5를 이용해서 테스트 코드를 작성했고, 커버리지를 높일 수 있었다.(테스트 코드 자체가 잘 작성됐는지는 미지수지만…)
코드 개선 방향에 무조건적인 정답은 있을 수 없겠지만, 소나 큐브가 어느 정도 기준점이 되어줬다. 코드 스타일이 전반적으로 통일되고, 잠재적 위험을 많이 제거했으며, 커버리지를 높여서 서비스의 신뢰성을 확보할 수 있었다. 이런 좋은 툴을 알게 되어서 아주 기쁘다.&lt;/p&gt;

&lt;h5 id=&quot;cli-구축&quot;&gt;cli 구축&lt;/h5&gt;

&lt;p&gt;cli 환경에서 이벤트의 예약 리스트 및 상세 예약 내역을 조회할 수 있도록 구현하는 과제를 받았다. 과제의 의도는 코드 리뷰 때 받았던 지적과 맥을 함께 한다. 이 과제는 컨트롤러와 서비스의 책임 분리가 잘 되어있어야 쉽게 구현할 수 있기 때문이다. 만약 그렇지 않다면 이 과제를 통해서 책임을 올바르게 분리하라는 의도로 과제를 내주신 것 같다. 서비스는 인터페이스 환경과 무관하게 비즈니스 로직을 처리하는 역할만 수행해야 한다. 만약 서비스 레이어에 웹과 관련된 컴포넌트가 들어오게 된다면 cli에서는 재사용할 수 없게 될 가능성이 높아진다. 사실 처음에는 이 과제의 의도가 도대체 뭘까 생각을 했는데, 의도를 들은 순간 무릎을 탁! 치게 됐다. 다시 한번 각 레이어의 책임에 대해서 생각해 볼 수 있었다.&lt;/p&gt;

&lt;h3 id=&quot;sprint7---스케일-아웃&quot;&gt;sprint7 - 스케일 아웃&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;sprint7 때는 웹 서버가 여러 대로 늘어나는 상황에 대해서 배웠다. 그리고 그런 상황에서 필요한 것들을 사전 준비하는 느낌의 과제들을 진행했다.&lt;/p&gt;

&lt;h5 id=&quot;세션의-구현&quot;&gt;세션의 구현&lt;/h5&gt;

&lt;p&gt;세션을 직접 구현하라는 과제가 주어졌다. 웹 서버가 여러 대로 늘어나게 되면 세션을 관리가 큰 이슈가 된다. 여러 방법이 있지만 이번 교육에서는 여러 웹 서버가 공유해서 사용할 수 있는 세션 스토리지를 만드는 방식을 채택했다. 여기에 추가적으로 세션 스토리지를 db, redis 두 가지 스토리지로 구현해야 된다는 조건이 붙었다. 우리 TF는 세션을 관리하는 데 필요한 기능들을 추상화하여 인터페이스로 먼저 뽑아내고 db session과 redis session이라는 구현체를 만드는 방식으로 진행했다. redis는 처음 접해봤고 심지어 세션 기능도 직접 만들어보는 건 처음이라서 아주 재밌었던 과제였다.&lt;/p&gt;

&lt;h5 id=&quot;object-storage&quot;&gt;object storage&lt;/h5&gt;

&lt;p&gt;기존에는 웹 서버가 하나였기 때문에 뮤지컬 이미지와 같은 리소스들은 서버에서 별도의 디렉토리를 만들어서 관리했다. 하지만 여러 노드에 웹 서버가 운영되면 웹 서버가 공통적으로 참조해야 할 스토리지가 필요해진다. 그래서 nhn cloud의 object storage에서 이미지를 관리하는 방식으로 변경하라는 과제가 주어졌다. 특정 운영 서버가 아닌 클라우드 환경에 별도 저장을 하게 되기 때문에 문제가 해결된다. api 이용 가이드도 너무 잘 돼있어서 금방 적용할 수 있었다.&lt;/p&gt;

&lt;h5 id=&quot;deploy를-이용한-배포&quot;&gt;deploy를 이용한 배포&lt;/h5&gt;

&lt;p&gt;배포를 nhn cloud의 deploy를 이용해서 하는 방식으로 바꾸라는 과제도 주어졌다. 기존에는 서버에 직접 접근해서 스크립트를 실행하여 배포를 진행했는데 deploy를 이용하면 간단한 설정과 시나리오를 적용해서 클릭 한 번으로 배포를 완료할 수 있게 된다. 배포에 대한 부담감이 줄어들어서 개발한 내용을 좀 더 빠르게 적용할 수 있게 된 것 같다.&lt;/p&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;매 sprint마다 그랬지만 이번 sprint는 특히 처음 접해보고, 시도해보는 것들이 많아서 개인적으로 더 좋았던 것 같고 자신감도 붙은 것 같다. 이때 배운 내용들을 잘 기억하고 익혀서 부서 배치를 받고 나서도 잘 활용할 수 있게 되면 좋겠다.&lt;/p&gt;

&lt;p&gt;회고 끝!&lt;/p&gt;</content><author><name>Mun Soo Kim</name></author><category term="회고" /><summary type="html">sprint6, 7에 대한 회고록이다. 짧은 시간 동안 개발을 마치고 sprint 6 때는 리팩토링, 테스트 코드 작성을 통한 소나 큐브 커버리지 높이기, 서비스의 cli 구축 등의 과제를 진행했고, sprint 7에서는 웹 서버의 스케일 아웃을 위한 여러 과제들을 진행했다.</summary></entry><entry><title type="html">OAuth2에 대하여</title><link href="https://anstn1993.github.io/2020/03/09/OAuth2%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC.html" rel="alternate" type="text/html" title="OAuth2에 대하여" /><published>2020-03-09T00:00:00+09:00</published><updated>2020-03-09T00:00:00+09:00</updated><id>https://anstn1993.github.io/2020/03/09/OAuth2%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC</id><content type="html" xml:base="https://anstn1993.github.io/2020/03/09/OAuth2%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC.html">&lt;p&gt;이번 글에서는 OAuth2에 대해서 간단하게 살펴보도록 하겠습니다. 과제를 진행하던 중 토큰을 이용해서 다른 서비스의 인증 처리를 해야 할 일이 생겨서 그에 대한 정리 차원에서 이 글을 작성합니다.&lt;/p&gt;

&lt;h3 id=&quot;oauth-이전-인증-방식의-문제점&quot;&gt;OAuth 이전 인증 방식의 문제점&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;전통적인 클라이언트-서버 인증 모델에서는 클라이언트가 접근이 제한된(인증이 필요한) 리소스에 접근 요청을 할 때 사용자의 credentials(아이디, 비밀번호)를 이용해서 인증을 처리했습니다. 이런 방식은 단일 서비스에서는 문제가 없습니다. 하지만 오늘날의 많은 서비스들은 다른 서비스의 api를 활용해서 자신의 서비스를 구성하는 경우가 많고 이는 그런 api에 의존하게 되는 서드 파티 앱에서 인증 요청을 해야 하는 경우가 발생함을 의미합니다. 가령 A 서비스에서 B 서비스의 인증이 필요한 리소스에 접근해야 한다면 A 서비스는 유저의 B 서비스에 대한 credentials 정보를 받아서 인증을 진행해야 합니다. 이는 다음의 문제를 야기합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;서드파티 앱에 유저의 credentials 정보가 노출됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서드파티 앱이 의존하고 있는 서비스들은 1번과 같은 보안상의 이슈에도 불구하고 비밀번호 인증 방식을 제공해야만 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;서드파티 앱은 결국 자신이 의존하고 있는 서비스들의 리소스에 광범위하게 접근이 가능해집니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;oauth2의-인증-방식&quot;&gt;OAuth2의 인증 방식&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;OAuth2는 앞에서 살펴본 기존 인증 방식의 문제를 해결하기 위해서 나온 대안으로 http 프로토콜 레이어에서 사용자 credentials가 아닌 토큰을 통해서 인증을 처리합니다.&lt;/p&gt;

&lt;p&gt;OAuth2 인증 과정에는 4개의 주체들이 상호작용하게 됩니다. 4개의 주체들에 대해서 먼저 살펴보겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;resource owner&lt;/strong&gt;: 제한된 리소스(protected resource)에 접근 권한을 가지는 주체입니다. 만약 resource owner가 사람인 경우에는 end-user라고 칭하기도 합니다. 대부분의 서비스에는 회원이라는 주체가 존재하고 그 회원은 자신이 생성한 리소스에 대한 접근 권한을 가집니다. 예를 들면, 뮤지컬 서비스의 회원은 자신의 예매 정보, 뮤지컬에 대한 평가, 댓글 등과 같은 리소스를 생성한 주체가 되고 그 리소스의 소유자가 됩니다. 즉 회원이 resource owner가 되는 것입니다.
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;resource server&lt;/strong&gt;: 제한된 리소스(protected resource)를 제공하는 서버입니다. resource owner가 resource server에 직접 접근을 한다면 아이디, 비밀번호로 인증을 받게 되고, resource owner가 이용하는 서드 파티 앱이 resource owner의 리소스에 접근하는 경우에는 서드파티 앱에게 access token을 요구하게 됩니다. 예를 들면 resource owner의 예시에서 나왔던 뮤지컬 서비스가 resource server가 됩니다.
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;client&lt;/strong&gt;: resource owner의 resource에 접근하기 위해서 resource server에게 토큰을 이용해서 요청을 보내는 주체가 됩니다. 여기서 client는 OAuth2 인증을 제공하는 서버와의 관계에서 인증을 요청하는 쪽이라는 의미를 담고 있습니다. 뮤지컬 서비스(resource server)가 특정 사용자(resource owner)에 대한 예매 내역(protected resource)을 조회할 수 있는 api를 제공하고 있다고 가정해보겠습니다. 그리고 서드파티 앱에서 그 api를 이용하고 있다면 인증을 해야만 합니다. 즉, 이 경우에는 서드파티 앱이 client가 됩니다.
&lt;br /&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;authorization server&lt;/strong&gt;: client가 성공적으로 resource owner에 대한 인증을 하게 되면 access token을 발급해 주는 주체입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그럼 각 주체들이 어떻게 상호작용하게 되는지 sequence diagram을 통해서 좀 더 구체적으로 살펴보겠습니다.&lt;/p&gt;

&lt;div&gt;
    &lt;img style=&quot;border: 1px solid #000;&quot; alt=&quot;스크린샷 2021-02-04 오후 11 47 14&quot; src=&quot;https://user-images.githubusercontent.com/56672937/110352344-28de7d80-8079-11eb-8acf-496931def7be.png&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;(1): client가 resource owner에게 접근하고자 하는 resource server에 대한 접근 권한을 요청하는 단계입니다. 클라이언트 입장에서는 authorization grant(권한 증서)를 발급받기 위해서 필요한 과정입니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(2): Resource owner가 권한을 허가하면 클라이언트는 authorization grant를 받게 됩니다. Authorization grant는 일종의 권한 증서로 client가 resource server의 resource에 접근할 수 있는 권한을 resource owner에게 부여받았다는 확인증이라고 생각하시면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(3): client는 Authorization Server에 authorization grant를 제시하여 access token을 요청합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(4): authorization server는 authorization grant가 유효한 경우에 한해서 클라이언트에게 access token을 발급하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(5): client는 access token을 요청에 담아서 resource server의 protected resource에 접근하게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;(6): resource server는 client에게 받은 access token이 유효하면 요청한 resource를 반환해 주게 됩니다.&lt;/p&gt;

&lt;p&gt;OAuth2는 위와 같이 다소 복잡한 방식으로 인증을 진행하게 됩니다. 하지만 그런 복잡함 덕분에 client가 resource owner의 인증 정보를 가지게 되는 기존의 방식과는 달리 권한 증서만을 가지고 resource owner의 resource에 접근하게 되는 보안적인 안전성을 취하게 됐습니다.&lt;/p&gt;

&lt;h3 id=&quot;authorization-grant&quot;&gt;Authorization Grant&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;앞서 client가 authorization grant를 이용해서 resource owner의 resource에 접근하기 위해서 필요한 access token을 발급받는 과정을 봤습니다. 이 권한 증서에도 여러 타입이 존재합니다. 권한 증서의 타입에 따라서 실제 인증 절차의 구현에도 차이가 생기게 되는데요. 여러 타입 중에서 2가지를 살펴보겠습니다.&lt;/p&gt;

&lt;h5 id=&quot;1-authorization-code&quot;&gt;1. Authorization code&lt;/h5&gt;

&lt;p&gt;authorization server가 client와 resource owner 사이의 중개인 역할을 하여 resource owner로부터 바로 권한을 요청하는 대신 resource owner가 authorization server에 직접 접근해서 인증을 하게 하고 그로 인해서 발급되는 authorization code(권한 증서)를 client에게 전달해 주고, client는 그 권한 증서를 이용하여 authorization server에게 access token을 요청하는 방식입니다. 요즘엔 대부분의 서비스에서 제공하는 sns 로그인을 생각해 봅시다. sns 로그인 버튼을 누르게 되면 유저의 credentials 정보를 client 서비스가 아닌 해당 sns 서비스에서 직접 입력하게 됩니다. 그리고 로그인을 시도하게 되면 sns 서비스는 aurhorization code를 client에게 발급하고 client는 그 code를 다시 sns 서비스의 authorization server에 보내서 access token을 받게 됩니다. 이 모든 일들이 사용자가 로그인 버튼을 누르고 난 후 매우 짧은 시간 내에 일어나게 됩니다. 이처럼 클라이언트가 권한 증서를 받게 되기 전에 resource owner가 authorization server에 직접 인증을 하게 되기 때문에 resource owner의 credentials는 절대 client에 노출되지 않습니다.&lt;/p&gt;

&lt;h5 id=&quot;2-resource-owner-password-credentials&quot;&gt;2. Resource Owner Password Credentials&lt;/h5&gt;

&lt;p&gt;resource owner의 password가 access token을 획득하기 위한 authorization grant로 활용되는 방식입니다. 유저의 비밀번호를 권한 증서로 사용하는 것이기 때문에 일반적으로 client와 resource server가 다른 경우에는 사용하면 안 되는 방식입니다. 단일 서비스에서의 인증을 하는 경우나 resource owner와 client 사이의 깊은 신뢰관계가 보장되는 경우에 한해서 사용하는 방식입니다. 계정 정보(user name, password)를 통해서 바로 access token을 발급받게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;지금까지 OAuth2 인증 방식에 대해서 간단하게 살펴봤습니다. 긴 글 읽어주셔서 감사합니다~!&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;참고: &lt;a href=&quot;https://tools.ietf.org/html/rfc6749&quot;&gt;https://tools.ietf.org/html/rfc6749&lt;/a&gt;&lt;/p&gt;</content><author><name>Mun Soo Kim</name></author><category term="기술" /><summary type="html">이번 글에서는 OAuth2에 대해서 간단하게 살펴보도록 하겠습니다. 과제를 진행하던 중 토큰을 이용해서 다른 서비스의 인증 처리를 해야 할 일이 생겨서 그에 대한 정리 차원에서 이 글을 작성합니다.</summary></entry><entry><title type="html">nhn 기술교육 sprint5 회고</title><link href="https://anstn1993.github.io/2020/02/22/nhn-%EA%B8%B0%EC%88%A0%EA%B5%90%EC%9C%A1-sprint5-%ED%9A%8C%EA%B3%A0.html" rel="alternate" type="text/html" title="nhn 기술교육 sprint5 회고" /><published>2020-02-22T00:00:00+09:00</published><updated>2020-02-22T00:00:00+09:00</updated><id>https://anstn1993.github.io/2020/02/22/nhn-%EA%B8%B0%EC%88%A0%EA%B5%90%EC%9C%A1-sprint5-%ED%9A%8C%EA%B3%A0</id><content type="html" xml:base="https://anstn1993.github.io/2020/02/22/nhn-%EA%B8%B0%EC%88%A0%EA%B5%90%EC%9C%A1-sprint5-%ED%9A%8C%EA%B3%A0.html">&lt;p&gt;sprint5에 대한 회고록이다. 이전 sprint에서 기획과 db 모델링 등의 전반적인 설계를 마친 후 본격적인 개발에 착수한 한 주였다.&lt;/p&gt;

&lt;h3 id=&quot;협업&quot;&gt;협업&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;이전엔 이렇다 할 협업 경험이 없어서 걱정 반, 기대 반으로 sprint를 시작했다. 예상했던 대로 혼자 할 때와는 달리 많은 것들을 팀원들과 논의하고 정하면서 개발을 진행했다. 깃의 커밋 메시지나 코드의 변수명에 대한 컨벤션을 정하는 것과 같은 큰 틀에서의 합의부터 시작해서, 각자 맡은 기능과 기능의 접점에서 어떻게 로직이 이어지게 할지와 같은 세부적인 합의까지 진행했다. 혼자 개발을 하는 것이 아니기 때문에 이런 합의들은 너무나도 필수적인 과정이었고 이런 과정들이 생각보다 많은 비용과 노력이 필요했다.&lt;/p&gt;

&lt;p&gt;하지만 그 과정이 고통스럽진 않았다. 앞으로 개발자로서 늘 하게 될 협업이라는 것을 직접 해보고 있다는 생각에 오히려 즐거웠다.(어쩌면 내가 낸 의견을 팀원들이 그냥 다 잘 받아줘서 재밌었던 것일지도…) 그리고 또 다른 재미는 내가 담당하지 않은 기능들이 시간이 지나면서 조금씩 완성되어간다는 점이다. 이게 당연한 얘기이긴 하지만 내가 작성한 적이 없는 코드가 시간이 지나면 나의 로컬 프로젝트 리포지토리에 추가되고 코드들이 하나로 조립되어 문제없이 동작하는 것을 확인하는 재미가 쏠쏠했다.&lt;/p&gt;

&lt;h3 id=&quot;개발&quot;&gt;개발&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;내가 맡은 페이지는 좌석 선택 페이지, 예매 최종 확인 페이지, 예매 관리를 할 수 있는 admin 페이지였다. 좌석 선택 페이지의 경우에는 백엔드 로직보단 프론트엔드의 로직을 구성하는 게 더 난이도 있는 작업이었다. 인원수에 따라서 좌석을 선택했을 때의 동작이 달라져야 하고 설정한 인원수와 선택한 좌석의 수가 같아지기 전엔 다음 스텝으로 넘어가는 버튼을 비활성화해야 하는 등의 다양한 예외 처리를 고려해야 했다.&lt;/p&gt;

&lt;p&gt;예매 최종 확인 페이지의 경우 페이지를 구성하고 선택한 데이터를 조회하는 작업은 어렵지 않았지만 해당 페이지 요청 핸들러에서 선점 기능을 같이 구현해야 했기 때문에 그 작업이 가장 큰 허들이었다. 멘토님의 피드백을 받기 전까진 말이다. 처음에는 선점이 1분 뒤에 풀리니까 선점 데이터도 1분 뒤에 db에서 ‘삭제돼야 한다’라고 생각했다. 삭제에 초점을 맞추다 보니 1분 뒤에 삭제 이벤트를 db에서 트리거 하겠다는 복잡한 구현 방식을 생각하게 됐는데 멘토님이 나의 이런 원대한(?) 계획을 들으시더니 “선점 시간이 지난 데이터를 꼭 삭제해야만 할까요?”라는 피드백을 주셨다. 이 말을 들은 순간 머리를 망치로 맞은 느낌이 들면서 훨씬 간단한 방식이 떠올랐다. 그냥 선점 데이터 중 1분이 지난 데이터는 제외하고 조회하면 해결될 것이라고 생각했고 최종적으로 구현도 그렇게 하게 됐다. 이 피드백을 다행히도 선점 기능 개발을 시작하기 전에 받아서 시간을 많이 절약할 수 있었다고 생각한다. 멘토님 감사합니다!&lt;/p&gt;

&lt;p&gt;예매 데이터를 조회하고 추가/삭제할 수 있는 관리자 페이지도 만들었는데 이미 앞에서 구현해둔 페이지들의 코드를 조금만 수정하는 수준에서 금방 구현할 수 있었다.&lt;/p&gt;

&lt;h3 id=&quot;정해진-마감-기한&quot;&gt;정해진 마감 기한&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;이번 sprint에서 처음 경험한 것이 하나 더 있는데 그게 바로 마감기한 안에 개발을 완료하는 것이었다. sprint 초반에만 해도 일정 안에 큰 무리 없이 마무리를 할 수 있겠다고 생각했는데, 중반으로 갈수록 무리를 해야 마무리를 할 수 있겠다고 생각이 바뀌었고 실제로도 잠을 거의 포기하면서, 주말에도 개발을 하면서 겨우겨우 시연 발표 전까지 완성할 수 있었다. dev 서버에 배포도 해야 하고 배포된 환경에서 잘 동작하는지 확인을 하는 과정도 꼭 필요한데 이 과정에서 버그가 팡팡 터진다는 점을 간과했다. 그래도 배포 스크립트를 작성해둬서 깃허브 마스터 브랜치로 푸시만 하고 스크립트를 실행하는 두 단계만으로 재배포가 가능했기 때문에 빠르게 수정을 할 수 있었던 것 같다. 이렇게 열정적으로 불코딩을 한 게 얼마 만인지…동기들아 우리 너무 수고했다 ㅜㅜ&lt;/p&gt;

&lt;h3 id=&quot;기대되는-이후-일정들&quot;&gt;기대되는 이후 일정들&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;초기 개발이 끝났다. 앞으로는 코드 리뷰와 리팩토링의 과정이 진행될 것 같은데 오늘 시연 발표를 마치고 운영진 한 분이 앞으로의 교육이 ‘진짜’라고 말씀하셨다. 그게 이번 sprint에서의 고생은 아무것도 아니라는 것인지, 기술 교육에서 정말 중요하고 가치 있는 내용이 앞으로 나온다는 것인지, 아니면 둘 다인지는 모르겠지만 앞으로 배울 내용들은 정말 혼자서는 배우고 익히기 어려운 내용들이 될 것 같아서 더더욱 기대된다!&lt;/p&gt;

&lt;p&gt;회고 끝!&lt;/p&gt;</content><author><name>Mun Soo Kim</name></author><category term="회고" /><summary type="html">sprint5에 대한 회고록이다. 이전 sprint에서 기획과 db 모델링 등의 전반적인 설계를 마친 후 본격적인 개발에 착수한 한 주였다.</summary></entry><entry><title type="html">nhn 기술교육 2주차 회고</title><link href="https://anstn1993.github.io/2020/02/04/nhn-%EA%B8%B0%EC%88%A0%EA%B5%90%EC%9C%A1-2%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0.html" rel="alternate" type="text/html" title="nhn 기술교육 2주차 회고" /><published>2020-02-04T00:00:00+09:00</published><updated>2020-02-04T00:00:00+09:00</updated><id>https://anstn1993.github.io/2020/02/04/nhn-%EA%B8%B0%EC%88%A0%EA%B5%90%EC%9C%A1-2%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0</id><content type="html" xml:base="https://anstn1993.github.io/2020/02/04/nhn-%EA%B8%B0%EC%88%A0%EA%B5%90%EC%9C%A1-2%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0.html">&lt;p&gt;기술 교육 2주차에 대한 회고록이다. 1주차는 사전 과제를 주로 진행했다면 2주차부터는 본격적으로 서비스 개발의 프로세스를 직접 밟아가기 시작했다.&lt;/p&gt;

&lt;h3 id=&quot;기획은-처음이라&quot;&gt;기획은 처음이라..&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;2주차의 메인 과제는 서비스에 대한 기획을 하는 것이었다. 서비스에 대한 주요 스펙이 주초에 공개됐고, 그 서비스에 대해서 기획을 했는데, 이때 운영진분들이 강조하신 것은 바로 ‘이번주는 우리 모두가 개발자가 아닌 기획자’라는 점이다. 이런 점을 강조하신 이유도 설명해주셨다. 기획 단계에서 개발자의 시선이 들어가버리면 사용자에게 유익한 서비스가 아닌, 개발하기 편한 서비스가 만들어질 가능성이 높아지기 때문이다. 그로 인해 더 좋은 서비스가 나올 수 있는 가능성이 기획 단계부터 차단될 수 있다.&lt;/p&gt;

&lt;p&gt;위의 사실을 명심하면서 기획을 시작했지만, 우린 개발자들이다보니 개발자의 시선을 완전히 배재하는 것이 말처럼 쉽진 않았다. 구현, 일정에 대한 생각이 조금씩은 개입될 수밖에 없었다. 하지만 아주 초보적이고 투박한 기획이지만 멘토님의 피드백을 많이 받으면서 나름대로 완성할 수 있었고 그 과정에서 느낀 점은 다음과 같다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;기획에서 서비스의 플로우, 예외 상황에 대해서 아주 구체적으로 생각하는 시간을 가지다보니 실제 구현 단계에서는 빠르게 구현에만 집중할 수 있다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;기획자분들의 노고에 박수를….기획이 생각보다 서비스 전반의 모든 플로우를 매우 깊은 레벨까지 고려하게 되는데 이 작업이 생각보다 쉽지 않다는 것을 느꼈다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;결국 기획자분들의 기획 덕분에 개발자가 개발에 더 집중할 수 있게 되는 측면도 있다고 생각하기 때문에 실제로 부서에 배치받게 되면 기획자분들과도 상호 존중을 통해서 더 좋은 시너지를 내야겠다고 다짐한 한 주였다.&lt;/p&gt;

&lt;h3 id=&quot;동기들과의-친밀감&quot;&gt;동기들과의 친밀감&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;기획을 하는 한주동안 TF 팀원들과 회의를 아주 많이 했다. 회의를 하니까 자연스럽게 대화를 많이 하게 됐고 중간중간 사적인 대화들도 하다보니 더 많이 친해진 것 같다. 그리고 각자의 좋은 성향이나 특징이 서로의 부족한 부분을 채워줘서 더 완전한 팀을 이루는 느낌을 많이 받았다. 그 점이 너무 좋았다. 앞으로 함께 할 시간이 훨씬 길기 때문에 더 친해지고 더 완전해질 미래가 기대된다!&lt;/p&gt;

&lt;p&gt;그리고 다른 TF의 동기들과도 조금씩 대화도 많이 하고 친해지는 중이다. 특히 퇴근 후 판교역까지 걸어가는 파티원들이 있는데 그 인원이 점점 많아지고 있다ㅋㅋㅋㅋ 인원이 많다보니 모든 사람들과 친해지는 것이 쉽진 않겠지만 기술교육이 끝날 때가 되면 더 많은 동기들과 서로 의지할 수 있는 사이가 됐으면 좋겠다.&lt;/p&gt;

&lt;p&gt;ps. TF 팀원의 영업으로 노트북 받침대를 하나 샀는데 가격도 착하고 접으면 크기도 아주 작아지는 것이 대만족이다. 고맙다 또 좋은 거 있으면 추천해다오..(tmi)&lt;/p&gt;

&lt;p&gt;2주차 회고 끝!&lt;/p&gt;</content><author><name>Mun Soo Kim</name></author><category term="회고" /><summary type="html">기술 교육 2주차에 대한 회고록이다. 1주차는 사전 과제를 주로 진행했다면 2주차부터는 본격적으로 서비스 개발의 프로세스를 직접 밟아가기 시작했다.</summary></entry><entry><title type="html">spring boot에 대하여</title><link href="https://anstn1993.github.io/2020/02/04/spring-boot%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC.html" rel="alternate" type="text/html" title="spring boot에 대하여" /><published>2020-02-04T00:00:00+09:00</published><updated>2020-02-04T00:00:00+09:00</updated><id>https://anstn1993.github.io/2020/02/04/spring-boot%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC</id><content type="html" xml:base="https://anstn1993.github.io/2020/02/04/spring-boot%EC%97%90-%EB%8C%80%ED%95%98%EC%97%AC.html">&lt;p&gt;spring boot는 순수 spring으로만 개발할 때 개발자가 직접 해야 할 아주 많은 일들을 대신 해줌으로써 생산성을 많이 높여줍니다. 그럼 spring boot가 개발자들을 위해서 어떤 것들을 해주는지 살펴보겠습니다.&lt;/p&gt;

&lt;h3 id=&quot;의존성-관리&quot;&gt;의존성 관리&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;spring boot는 주요 프로젝트들의 의존성을 편리하게 관리해줍니다. 일반적으로 pom.xml파일에 dependency를 추가할 때는 버전 정보를 함께 명시해야 하는데요. spring boot의 dependency를 보시면 버전 정보가 없는 것을 확인하실 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;pom.xml
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-parent&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.3.8.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;relativePath/&amp;gt;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- lookup parent from repository --&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencies&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;위에서 확인할 수 있듯이 버전에 대한 정보를 명시하지 않고 있습니다. spring boot가 알아서 적절한 버전을 가져와주기 때문입니다. 각 프로젝트들의 버전 정보는 parent태그에 명시된 spring-boot-starter-parent artifact에 정의되어 있습니다. 맥은 command를, 윈도우는 control키를 누르고 artifact명을 클릭하면 아래의 파일에 접근하게 됩니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;spring-boot-starter-parent-2.3.8.RELEASE.pom
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;parent&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-dependencies&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.3.8.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/parent&amp;gt;&lt;/span&gt;
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;여기서 다시 한 번 spring-boot-dependencies를 타고 들어가봅니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;spring-boot-dependencies-2.3.8.RELEASE.pom
    &lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependencyManagement&amp;gt;&lt;/span&gt;
      ...
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;spring-boot-starter-web&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;2.3.8.RELEASE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
      ...
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependencyManagement&amp;gt;&lt;/span&gt;
  ...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;네 드디어 도착입니다. 위 파일의 dependencyManagement태그에 각 프로젝트들에 대한 버전 정보를 명시해두고 있습니다. 저희가 pom.xml에 직접 추가하는 의존성들에 대한 버전은 이 파일에 명시된 버전으로 설정됩니다. 즉 &lt;strong&gt;&lt;em&gt;pom.xml파일은 위의 부모 설정들을 상속받아서 버전을 정의하게 되는 겁니다.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;그리고 이렇게 버전을 대신 관리해주게 되면 의존성 간의 버전 호환성에 대한 걱정도 할 필요가 없어집니다. spring boot가 의존성을 추가할 때 알아서 설정된 버전과 호환되는 버전으로 추가를 해주기 때문입니다.&lt;/p&gt;

&lt;p&gt;만약 pom.xml파일에 의존성을 추가할 때 개발자가 직접 버전을 명시하게 되면 부모 설정을 오버라이딩하여 개발자가 명시한 버전으로 의존성을 추가하게 됩니다.&lt;/p&gt;

&lt;h3 id=&quot;springbootapplication&quot;&gt;@SpringBootApplication&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;spring은 xml이나 자바 설정을 통해서 빈을 ioc컨테이너에 등록할 수 있습니다. 특히 자바 설정을 이용할 때는 자바 config파일을 만들어서 @Configuration, @ComponentScan과 같은 annotation을 사용해서 아래와 같이 만들 수 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;AppConfig.java(제가 임의로 만든 파일입니다. spring boot프로젝트에는 존재하지 않습니다.)
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;basePackageClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleTicketApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AppConfig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;위의 파일을 패키지의 루트에 위치시키면 그 파일과 같은 depth에 위치한 자바 파일과 패키지들에 존재하는 자바 파일까지 스캔을 하면서 @Controller, @Service, @Configuration, @Repository와 같은 컴포넌트 annotation이 붙은 클래스들을 모두 빈으로 등록하게 됩니다.&lt;/p&gt;

    &lt;p&gt;하지만 spring boot프로젝트를 만들면 위와 같은 설정 파일이 없음에도 불구하고 빈들이 잘 등록됩니다. 그 역할을 @SpringBootApplication이 하게 됩니다. 이 annotation은 프로젝트를 처음 생성하면 루트 패키지의 Application 클래스에 붙게 됩니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SampleTicketApplication.java
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SampleTicketApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
          &lt;span class=&quot;nc&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SampleTicketApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;spring boot프로젝트를 처음 생성하면 패키지의 루트에 위치하는 Application 클래스 입니다. 이 클래스에서 애플리케이션을 실행하게 되죠. @SpringBootApplication을 타고 들어가보면 아래와 같은 파일이 나오게 됩니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SpringBootApplication.java
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ElementType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RetentionPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Documented&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@Inherited&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@SpringBootConfiguration&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@EnableAutoConfiguration&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@ComponentScan&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;excludeFilters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FilterType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TypeExcludeFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Filter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FilterType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CUSTOM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;classes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AutoConfigurationExcludeFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringBootApplication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;@SpringBootApplication에 @ComponentScan과 @SpringBootConfiguration이 붙은 것을 확인하실 수 있습니다. @SpringBootConfiguration을 타고 들어가보시면 @Configuration이 붙은 것을 확인하실 수 있습니다. 즉 &lt;strong&gt;&lt;em&gt;@SpringBootApplication이 붙은 Application 클래스가 빈을 등록하기 위한 자바 설정 파일의 역할을 겸하고 있는 것입니다.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;자동-설정&quot;&gt;자동 설정&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;@SpringBootApplication을 통해서 컴포넌트 annotation이 붙은 클래스들을 알아서 빈으로 등록해준다는 것을 확인했습니다. 그런데 이렇게 개발자가 직접 정의한 빈 이외에도 spring boot가 정의해둔 유용한 빈들이 ioc컨테이너에 추가됩니다. 이 기능도 @SpringBootApplication에 붙은 &lt;strong&gt;&lt;em&gt;@EnableAutoConfiguration&lt;/em&gt;&lt;/strong&gt; 때문에 동작합니다.&lt;/p&gt;

&lt;p&gt;그럼 이 자동으로 등록되는 빈은 어디에서 스캔되는 걸까요?&lt;/p&gt;
&lt;div&gt;
    &lt;img width=&quot;400&quot; alt=&quot;스크린샷 2021-02-04 오후 11 44 40&quot; src=&quot;https://user-images.githubusercontent.com/56672937/106908903-12c06300-6743-11eb-9ad0-f8400cbcf2c6.png&quot; /&gt;
&lt;/div&gt;
&lt;div&gt;
    &lt;img width=&quot;539&quot; alt=&quot;스크린샷 2021-02-04 오후 11 47 14&quot; src=&quot;https://user-images.githubusercontent.com/56672937/106909149-561ad180-6743-11eb-9b5b-4658129f9475.png&quot; /&gt;
&lt;/div&gt;
&lt;p&gt;IntelliJ의 좌측 프로잭트 구조에서 하단의 External Libraries에 여러 의존성들 중 위의 이미지에 보이는 spring-boot-autoconfigure프로젝트의 spriing.factories파일에 명시되어 있습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;spring.factories&lt;/p&gt;

    &lt;div class=&quot;language-tex highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # Auto Configure
  org.springframework.boot.autoconfigure.EnableAutoConfiguration=&lt;span class=&quot;k&quot;&gt;\
  &lt;/span&gt;...
  org.springframework.boot.autoconfigure.web.servlet.MultipartAutoConfiguration,&lt;span class=&quot;k&quot;&gt;\
  &lt;/span&gt;org.springframework.boot.autoconfigure.web.servlet.WebMvcAutoConfiguration,&lt;span class=&quot;k&quot;&gt;\
  &lt;/span&gt;org.springframework.boot.autoconfigure.websocket.reactive.WebSocketReactiveAutoConfiguration,&lt;span class=&quot;k&quot;&gt;\
  &lt;/span&gt;org.springframework.boot.autoconfigure.websocket.servlet.WebSocketServletAutoConfiguration,&lt;span class=&quot;k&quot;&gt;\
  &lt;/span&gt;org.springframework.boot.autoconfigure.websocket.servlet.WebSocketMessagingAutoConfiguration,&lt;span class=&quot;k&quot;&gt;\
  &lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;위와 같이 EnableAutoConfiguration에 명시된 Configuration파일들이 빈으로 등록됩니다. 대표적으로 WebMvcAutoConfiguration만 살펴보겠습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;WebMvcAutoConfiguration.java
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;proxyBeanMethods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@ConditionalOnWebApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SERVLET&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@ConditionalOnClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Servlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DispatcherServlet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcConfigurer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@ConditionalOnMissingBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WebMvcConfigurationSupport&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@AutoConfigureOrder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2147483638&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nd&quot;&gt;@AutoConfigureAfter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DispatcherServletAutoConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TaskExecutionAutoConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ValidationAutoConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;WebMvcAutoConfiguration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

      &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

      &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;proxyBeanMethods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EnableWebMvcConfiguration&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DelegatingWebMvcConfiguration&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResourceLoaderAware&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

          &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

          &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestMappingHandlerAdapter&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestMappingHandlerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mvcContentNegotiationManager&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContentNegotiationManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentNegotiationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mvcConversionService&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FormattingConversionService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conversionService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mvcValidator&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Validator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;nc&quot;&gt;RequestMappingHandlerAdapter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestMappingHandlerAdapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentNegotiationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conversionService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
              &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setIgnoreDefaultModelOnRedirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mvcProperties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mvcProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isIgnoreDefaultModelOnRedirect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;adapter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

          &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;

          &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
          &lt;span class=&quot;nd&quot;&gt;@Primary&lt;/span&gt;
          &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RequestMappingHandlerMapping&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;requestMappingHandlerMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mvcContentNegotiationManager&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ContentNegotiationManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contentNegotiationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mvcConversionService&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FormattingConversionService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conversionService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Qualifier&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mvcResourceUrlProvider&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ResourceUrlProvider&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceUrlProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
              &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestMappingHandlerMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contentNegotiationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conversionService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resourceUrlProvider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
          &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

          &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;위 설정 파일을 보면 @Configuration이 붙어있습니다. 즉 spring.factories에 명시된 설정 파일을 빈으로 등록하고 그 설정 파일에 있는 빈들이 등록되는 것입니다. 여러 빈들 중 HandlerMapping, HandlerAdapter와 같이 spring mvc가 제공하는 dispatcher servlet의 전략 인터페이스들이 빈으로 등록되는 것을 확인할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;정리해보면 spring boot는 사용자가 정의한 빈을 등록하고 자동 설정에 등록된 빈을 등록하는 두 단계를 거치게 되는 겁니다.&lt;/p&gt;

&lt;h3 id=&quot;내장-was&quot;&gt;내장 was&lt;/h3&gt;
&lt;p&gt;spring boot는 was가 프로젝트에 내장되어 있습니다. 즉 jar로 패키징을 해서 실행을 하는 것만으로 서버에 애플리케이션을 바로 띄울 수 있게 됩니다. 이 기능도 앞서 살펴본 자동 설정과 관련됩니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;spring.factories&lt;/p&gt;

    &lt;div class=&quot;language-tex highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  # Auto Configure
  org.springframework.boot.autoconfigure.EnableAutoConfiguration=&lt;span class=&quot;k&quot;&gt;\
  &lt;/span&gt;...
  org.springframework.boot.autoconfigure.web.servlet.ServletWebServerFactoryAutoConfiguration,&lt;span class=&quot;k&quot;&gt;\
  &lt;/span&gt;...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;앞서 살펴본 spring.factories파일에 명시된 ServletWebServerFactoryAutoConfiguration.java에 내장 was와 관련된 빈들이 등록되어 있습니다.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;마치며&quot;&gt;마치며&lt;/h3&gt;
&lt;p&gt;지금까지 spring boot가 어떤 역할을 하는지 몇 가지 살펴봤는데요. 저의 글이 조금이나마 도움이 됐으면 좋겠습니다. 이외에도 spring boot가 우리에게 제공해주는 효용은 더 많습니다. 저도 공부를 하는 입장이다보니 다 알지 못 하고 틀린 내용이 있을 수 있습니다. 틀린 내용이 있거나 다른 좋은 기능이 있다면 댓글로 알려주시면 굉장히 감사할 것 같습니다. 긴 글 읽어주셔서 감사합니다~!&lt;/p&gt;</content><author><name>Mun Soo Kim</name></author><category term="기술" /><category term="spring" /><summary type="html">spring boot는 순수 spring으로만 개발할 때 개발자가 직접 해야 할 아주 많은 일들을 대신 해줌으로써 생산성을 많이 높여줍니다. 그럼 spring boot가 개발자들을 위해서 어떤 것들을 해주는지 살펴보겠습니다.</summary></entry><entry><title type="html">nhn 기술교육 1주차 회고</title><link href="https://anstn1993.github.io/2020/01/21/nhn-%EA%B8%B0%EC%88%A0%EA%B5%90%EC%9C%A1-1%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0.html" rel="alternate" type="text/html" title="nhn 기술교육 1주차 회고" /><published>2020-01-21T00:00:00+09:00</published><updated>2020-01-21T00:00:00+09:00</updated><id>https://anstn1993.github.io/2020/01/21/nhn-%EA%B8%B0%EC%88%A0%EA%B5%90%EC%9C%A1-1%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0</id><content type="html" xml:base="https://anstn1993.github.io/2020/01/21/nhn-%EA%B8%B0%EC%88%A0%EA%B5%90%EC%9C%A1-1%EC%A3%BC%EC%B0%A8-%ED%9A%8C%EA%B3%A0.html">&lt;p&gt;기술 교육 1주차 일정이 모두 끝났다. 방금 사전과제에 대한 시험을 마치고 이 글을 바로 작성한다. 기억은 시간이 지나면 지날수록 희석되기 때문에 최대한 선명할 때 지난 일주일 간의 기억을 바로 기록하겠다.&lt;/p&gt;

&lt;h3 id=&quot;처음-써보는-맥북&quot;&gt;처음 써보는 맥북&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;나는 평생을 윈도우 os 노트북만 사용해왔던 사람이다. 하지만 현업의 개발자분들은 대부분 맥북으로 개발을 하시고 그것을 보면서 나도 취업하고 빨리 맥북을 써보고 싶다는 나름의 동경?을 하면서 살아왔는데 그 동경의 순간을 월요일에 만끽할 수 있었다. 맥북의 실물을 영접한 순간 너무 예뻐서 소리를 지르고 싶었지만 사무실이라 그러진 못 했다.. ㅎㅎ 나의 더러운 손으로 만지기가 아까울 지경이었으니..&lt;/p&gt;

&lt;p&gt;하지만 저런 기쁨도 잠시.. 부팅을 하고 본격적으로 이것 저것 해보는 순간부터 손에 마비가 오고 뇌정지가 왔다. 키보드도 익숙하지 않고, 익히 알던 디렉토리 구조도 다르고 모든 것이 다 달랐기 때문이다. 그래서 첫 날에는 맥북에 익숙해지는 데 시간을 다 쓴 것 같다. 특히 Intelli J의 단축키를 새롭게 익혔어야 했던 점이 가장 멘붕이었다. 그래도 이미 맥북을 쓰고 계시던 여러 동기분들께서 꿀팁들을 많이 알려주셔서 생각보다 빨리 적응할 수 있었다. 지금은 트랙패드도 내 기준에선 나름? 많이 활용하고 있고 생산성도 처음보다 많이 올라온 것 같다. 이 글을 통해 동기들에게 감사인사를 전한다.&lt;/p&gt;

&lt;p&gt;그리고 이건 여담이지만 스피커 성능이 미친 것 같다. 내가 그램을 쓰다가 와서 그런진 모르겠지만, 노트북 스피커에서 이런 소리가 나다니… 앞으론 블루투스 스피커 필요 없을듯..?&lt;/p&gt;

&lt;h3 id=&quot;사전과제&quot;&gt;사전과제&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;1주차에는 개인 과제가 주어졌다. 책을 보면서 스프링 부트 프로젝트를 만들고 깃허브로 제출하는 과제였다. 여기에 추가적인 요구사항이 있었다. 깃허브에서 issue를 기능 스펙별로 등록하면서 프로젝트를 진행하는 것이었는데, 난 지금까지 혼자서 개발을 해왔던 터라 사실 나 혼자 커밋하고 푸시하는 것만 해봤지 그 외에 다른 기능은 거의 사용해본 적이 없었다. 그래서 처음에는 많이 당황했다. 하지만 주변에 훌륭한 동기들이 너무나도 많이 있었고 그분들에게 많이 배울 수 있었다. 그 덕분에 처음으로 브랜치를 별도로 나누어서 개발하고 마스터 브랜치로 pull request를 통해 merge하면서 issue들을 하나씩 해결해나갔다. 협업을 할 때 pull request는 필수라고 듣기만 했지 직접 해보지는 못했는데 이 기회에 비록 혼자서 북치고 장구친 격으로 한 것이지만 대략적인 흐름을 알 수 있어서 좋았다.&lt;/p&gt;

&lt;p&gt;위에서도 말했지만 사전과제를 하면서 느낀 점은 훌륭한 사람들과 함께 공부를 한다는 것은 정말 큰 행운이라는 점이다. 서로의 부족한 부분을 서로의 지식으로 공유하면서 채워주기 때문에 정말 짧은 시간동안 많은 것을 배울 수 있다. 그리고 함께 서로의 진행 상황을 공유하다보니 자극도 되고 동기부여도 돼서 좋은 것 같다. (그렇지만 추가 과제는 결국 제출 못 한 나란 녀석….분발하자) 그리고 이런 교류가 잘 일어날 수 있는 이유는 그렇게 되게끔 유도하는 환경을 기술 교육 운영진분들이 너무 잘 만들어주셨기 때문이라고 생각한다. 다음 1주일도 너무 기대가 된다..? 하하하&lt;/p&gt;

&lt;h3 id=&quot;github-페이지&quot;&gt;Github 페이지&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;정말 지난 몇 달을 해야지.. 나도 하나 만들어야지.. 라고 생각만 하고 지금까지 실천으로 옮기지 못 했던 Github 페이지로 블로그 만들기를 이번 주에 했다. 나는 사실 사전 과제도 사전 과제지만 이 과제를 내주신 운영진분들께 너무 감사드린다. 그분들의 푸시가 이런 결과를 만들어 냈으니 말이다ㅋㅋㅋㅋ 사실 예전에도 jekyll을 이용해서 페이지를 만들기까진 했었는데 그 뒤로 게시물을 추가하거나 커스터마이징은 하지 못 하고 끝났었다. jekyll의 기본적인 사용법, 구조를 전혀 이해하지 않은 상태였기 때문이다. 그런데 이번엔 그게 과제로 주어졌으니 확실히 마음가짐이 달라졌던 것 같다. 동기가 보내준 jekyll 공식 문서를 읽으면서 기본적인 사용법, 구조를 이해할 수 있었다. 생각보다 어렵지 않았고 ‘진작 좀 할걸..’이라는 생각도 들었다. 아무튼 지금이라도 만들었으니 앞으로는 꾸준히 글을 써볼 생각이다..!!&lt;/p&gt;

&lt;h3 id=&quot;루키하마&quot;&gt;루키하마&lt;/h3&gt;

&lt;hr /&gt;

&lt;p&gt;내가 속한 TF는 ‘루키하마’다. 세상 이렇게 귀여운 이름을 가진 TF는 이 세상에 없을 것이다. 입문교육이 끝나고 새롭게 조가 편성되는데 TF조원들이 입문교육 때 조원들과 하나도 겹치지 않았다. 모두 처음 대하는 분들이다 보니 첫 날에는 어색한 기류가 흘렀다.. ㅋㅋㅋㅋ 그래서 다음날에 빨리 친해질수록 좋을 것 같아서 조심스럽게 말을 편하게 하자고 제안을 했는데 다행히도 모두 이구동성으로 ‘나도 그러고 싶었다’고 해줬다. 확실히 말의 힘은 너무 강해서 작은 차이임에도 분위기에 큰 변화를 가져온다. 아직 훨씬 더 많이 친해져야 하지만 그래도 조금은 가까워진 것 같다. 우리 얼른 더 많이 친해지자!! 다른 조원 분들과도 얼른 친해지고 싶어요!!&lt;/p&gt;

&lt;p&gt;기술교육 과정 중 매주 돌아가면서 조장을 맡아야 하는데 이번주에는 내가 조장을 맡았다. 조장이라서 처음엔 마음에 아~주 경미한 부담이 있었던 건 사실이다. 그런데 팀원들이 알아서 너무 다 잘해서 내가 특별히 할 게 없었다.(나만 잘 하면 됐다) 할 게 없는데도 뭐 하나 하는 데 시간이 많이 걸렸다. 사내 시스템인 두레이에 익숙하지 않고, 맥북에도 익숙하지 않다보니 프로젝트에 슝슝 올라오는 할일들을 체크하고 처리하는 것만으로도 시간이 너무 금방 갔다. 거기다 사전과제까지 동시에 진행하려다보니 더 정신이 없었다. 얼른 익숙해져야겠다. 이번주에 한 일은 몇 가지 필요한 정보들을 모아서 대표로 메일 보내는 거랑 재택근무하는 날 아침에 운영진분들과 팀의 상황을 보고드리는 것이었다. 아침에 보고드리는 것은 앞으로 회사 생활하면서 매일같이 하게 될 일일 것이기에 빨리 익숙해져야 할 것 같고 아주 소중한 경험이었다고 생각한다.&lt;/p&gt;

&lt;p&gt;이번주 회고 끝!&lt;/p&gt;</content><author><name>Mun Soo Kim</name></author><category term="회고" /><summary type="html">기술 교육 1주차 일정이 모두 끝났다. 방금 사전과제에 대한 시험을 마치고 이 글을 바로 작성한다. 기억은 시간이 지나면 지날수록 희석되기 때문에 최대한 선명할 때 지난 일주일 간의 기억을 바로 기록하겠다.</summary></entry></feed>